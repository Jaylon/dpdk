/*
 *   BSD LICENSE
 *
 *   Copyright(c) 2016 Intel Corporation. All rights reserved.
 *
 *   Redistribution and use in source and binary forms, with or without
 *   modification, are permitted provided that the following conditions
 *   are met:
 *
 *	 * Redistributions of source code must retain the above copyright
 *	   notice, this list of conditions and the following disclaimer.
 *	 * Redistributions in binary form must reproduce the above copyright
 *	   notice, this list of conditions and the following disclaimer in
 *	   the documentation and/or other materials provided with the
 *	   distribution.
 *	 * Neither the name of Intel Corporation nor the names of its
 *	   contributors may be used to endorse or promote products derived
 *	   from this software without specific prior written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef TEST_CRYPTODEV_AES_TEST_VECTORS_H_
#define TEST_CRYPTODEV_AES_TEST_VECTORS_H_

static const uint8_t plaintext_aes[] =
		"What a lousy earth! He wondered how many people "
		"were destitute that same night even in his own "
		"prosperous country, how many homes were "
		"shanties, how many husbands were drunk and "
		"wives socked, and how many children were "
		"bullied, abused, or abandoned. How many "
		"families hungered for food they could not "
		"afford to buy? How many hearts were broken? How "
		"many suicides would take place that same night, "
		"how many people would go insane? How many "
		"cockroaches and landlords would triumph? How "
		"many winners were losers, successes failures, "
		"and rich men poor men? How many wise guys were "
		"stupid? How many happy endings were unhappy "
		"endings? How many honest men were liars, brave "
		"men cowards, loyal men traitors, how many "
		"sainted men were corrupt, how many people in "
		"positions of trust had sold their souls to "
		"bodyguards, how many had never had souls? How "
		"many straight-and-narrow paths were crooked "
		"paths? How many best families were worst "
		"families and how many good people were bad "
		"people? When you added them all up and then "
		"subtracted, you might be left with only the "
		"children, and perhaps with Albert Einstein and "
		"an old violinist or sculptor somewhere.";

static const uint8_t ciphertext_aes128ctr[] = {
		0x01, 0xE4, 0xCF, 0xF7, 0x02, 0x6F, 0xCD, 0xA6,
		0x46, 0x80, 0x23, 0x39, 0x67, 0x8E, 0x0C, 0x01,
		0x60, 0x9B, 0x31, 0xCA, 0xF1, 0xED, 0x80, 0xBA,
		0x0B, 0x57, 0x48, 0xAF, 0x60, 0xD1, 0x01, 0x42,
		0xCD, 0x4E, 0x0E, 0xB1, 0x54, 0x4B, 0x19, 0xC9,
		0x31, 0x53, 0x75, 0x4B, 0x8C, 0xBB, 0xA6, 0xB2,
		0x18, 0x0B, 0xD4, 0xEC, 0xB3, 0x0B, 0x9F, 0x7C,
		0x92, 0xC2, 0x38, 0x14, 0xC2, 0x2D, 0xDD, 0x65,
		0x87, 0x96, 0x3F, 0x99, 0x47, 0x1A, 0x34, 0x08,
		0x3E, 0xAC, 0xC0, 0x57, 0x46, 0x33, 0x32, 0x1E,
		0x27, 0x21, 0x7A, 0xCC, 0xF9, 0x67, 0x77, 0x10,
		0x74, 0xF6, 0x8B, 0x05, 0x79, 0x1F, 0xC5, 0xA9,
		0xAD, 0xAF, 0x78, 0x54, 0x37, 0x20, 0x8A, 0xCF,
		0x8E, 0x80, 0x9A, 0x42, 0xEA, 0x5A, 0x01, 0xA6,
		0x78, 0x56, 0x53, 0x92, 0x76, 0xEF, 0x72, 0x54,
		0xF3, 0xFA, 0xF1, 0x54, 0x05, 0x94, 0x99, 0x98,
		0x70, 0xE4, 0x82, 0xCC, 0x17, 0xD2, 0xA3, 0xED,
		0x66, 0x0F, 0x9D, 0x4B, 0x7C, 0x65, 0x31, 0xF1,
		0x04, 0x4D, 0x7E, 0x8D, 0x80, 0xEB, 0x1E, 0xDA,
		0x4F, 0x0A, 0xBC, 0xF6, 0x5C, 0xCF, 0xE4, 0x32,
		0x44, 0xDC, 0x24, 0xF0, 0xBF, 0xB8, 0x6E, 0x16,
		0x0C, 0x8F, 0xEF, 0xEF, 0xB3, 0xD6, 0xE3, 0xA4,
		0x1C, 0x11, 0xB3, 0x95, 0x79, 0xC5, 0x16, 0xC2,
		0xE6, 0xDC, 0xFB, 0x30, 0x1B, 0xC8, 0x91, 0xEF,
		0x56, 0xB7, 0x65, 0x6B, 0xCB, 0x05, 0x99, 0xBB,
		0x2A, 0xB1, 0x4B, 0xF4, 0x25, 0x9F, 0x0C, 0x50,
		0x0D, 0x9C, 0x23, 0x15, 0x68, 0x2D, 0x71, 0x8E,
		0x9F, 0xE8, 0xAC, 0xA9, 0xE1, 0x94, 0xA6, 0xF0,
		0x1F, 0x00, 0x94, 0x3D, 0xF6, 0x01, 0x9B, 0xBB,
		0x63, 0x3C, 0x9A, 0xCE, 0xF4, 0x76, 0x32, 0x14,
		0x30, 0x93, 0x76, 0x99, 0xB7, 0xEB, 0xED, 0x56,
		0x80, 0x26, 0xC5, 0x5C, 0x33, 0xDD, 0x80, 0x23,
		0x10, 0xA1, 0x9F, 0xAD, 0x54, 0x89, 0xBD, 0x49,
		0x5E, 0x06, 0x5F, 0x7A, 0x4A, 0x27, 0x61, 0x4D,
		0xD9, 0xC7, 0x5D, 0x3A, 0x86, 0xE7, 0x42, 0x4A,
		0xF4, 0x80, 0x0C, 0x8F, 0x1C, 0x8D, 0xDB, 0x7F,
		0xE2, 0xFC, 0x64, 0x86, 0x08, 0x42, 0x7A, 0xD8,
		0x75, 0x47, 0x32, 0xDB, 0xF7, 0x6B, 0xF4, 0xD5,
		0x07, 0xB9, 0x6B, 0x5A, 0x80, 0x8E, 0x6A, 0x85,
		0x4E, 0x09, 0x5C, 0xCA, 0x58, 0x02, 0x4B, 0xC9,
		0xE4, 0xFF, 0x2E, 0x62, 0x68, 0x87, 0xE8, 0xC3,
		0x11, 0xC1, 0xEA, 0x2B, 0x9D, 0xA3, 0x58, 0x56,
		0x3A, 0x31, 0x04, 0x0C, 0xBC, 0x7A, 0x0B, 0x06,
		0x18, 0x88, 0xAD, 0x68, 0xE3, 0xD2, 0x8B, 0x04,
		0x29, 0xA5, 0xFD, 0xD4, 0x59, 0xD8, 0x2E, 0x25,
		0xA7, 0xA3, 0x0E, 0x7E, 0x7F, 0xB4, 0x28, 0xD4,
		0x93, 0xB5, 0x88, 0x09, 0x42, 0xEF, 0xD6, 0x12,
		0xCD, 0x01, 0xAD, 0xEA, 0x14, 0x58, 0x53, 0xE0,
		0x15, 0xC0, 0xEC, 0xCA, 0x05, 0x4F, 0xE7, 0xD8,
		0xB5, 0x95, 0x7C, 0x8D, 0x76, 0xA1, 0x64, 0xBB,
		0xB6, 0x55, 0x0D, 0xC4, 0xC6, 0xD2, 0x92, 0x3A,
		0x4B, 0x85, 0x3A, 0x05, 0x25, 0x65, 0x62, 0x15,
		0x05, 0x98, 0x3A, 0x8D, 0x70, 0x7C, 0xD1, 0x6B,
		0x48, 0x50, 0xBC, 0xF6, 0x53, 0xE6, 0x0C, 0x9C,
		0xE5, 0x4A, 0x04, 0x31, 0x29, 0x51, 0x66, 0x12,
		0x18, 0xD4, 0x1F, 0x40, 0x5D, 0xDC, 0x04, 0xD8,
		0x0E, 0x1E, 0xFB, 0x07, 0xDD, 0xAE, 0x9E, 0xD6,
		0xE4, 0xA3, 0x44, 0xC8, 0x61, 0x39, 0x0F, 0x74,
		0x61, 0x2D, 0x60, 0x61, 0x0D, 0x91, 0x91, 0x50,
		0x6A, 0x3E, 0x8B, 0xE5, 0x3E, 0x2B, 0xCD, 0xA1,
		0x54, 0x1A, 0x56, 0xF9, 0xB8, 0x5D, 0x46, 0xE0,
		0x82, 0x47, 0x3B, 0xB1, 0x21, 0x32, 0xA0, 0x8E,
		0x7F, 0x79, 0x04, 0x09, 0x43, 0xC6, 0xA0, 0xFA,
		0x86, 0x1B, 0xE1, 0x07, 0x95, 0x2B, 0xE2, 0x7A
};

static const struct test_crypto_vector
aes128ctr_test_vector = {
	.crypto_algo = RTE_CRYPTO_CIPHER_AES_CTR,
	.cipher_key = {
		.data = {
			0xE4, 0x23, 0x33, 0x8A, 0x35, 0x64, 0x61, 0xE2,
			0x49, 0x03, 0xDD, 0xC6, 0xB8, 0xCA, 0x55, 0x7A
		},
		.len = 16
	},
	.iv = {
		.data = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
		},
		.len = 16
	},
	.plaintext = {
		.data = plaintext_aes,
		.len = 512
	},
	.ciphertext = {
		.data = ciphertext_aes128ctr,
		.len = 512
	}
};

static const struct test_crypto_vector
aes128ctr_hmac_sha1_test_vector = {
	.crypto_algo = RTE_CRYPTO_CIPHER_AES_CTR,
	.cipher_key = {
		.data = {
			0xE4, 0x23, 0x33, 0x8A, 0x35, 0x64, 0x61, 0xE2,
			0x49, 0x03, 0xDD, 0xC6, 0xB8, 0xCA, 0x55, 0x7A
		},
		.len = 16
	},
	.iv = {
		.data = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
		},
		.len = 16
	},
	.plaintext = {
		.data = plaintext_aes,
		.len = 512
	},
	.ciphertext = {
		.data = ciphertext_aes128ctr,
		.len = 512
	},
	.auth_algo = RTE_CRYPTO_AUTH_SHA1_HMAC,
	.auth_key = {
		.data = {
			0xF8, 0x2A, 0xC7, 0x54, 0xDB, 0x96, 0x18, 0xAA,
			0xC3, 0xA1, 0x53, 0xF6, 0x1F, 0x17, 0x60, 0xBD,
			0xDE, 0xF4, 0xDE, 0xAD
		},
		.len = 20
	},
	.digest = {
		.data = {
			0xCC, 0x7D, 0x3C, 0x5E, 0xE0, 0x0B, 0x50, 0xA9,
			0x9B, 0x57, 0x0B, 0x63, 0xCE, 0xD0, 0xCA, 0x6B,
			0x84, 0xA9, 0xC2, 0x1E
		},
		.len = 20
	}
};

static const uint8_t ciphertext_aes192ctr[] = {
		0x06, 0xA4, 0x49, 0x2A, 0x53, 0x60, 0x1E, 0x4C,
		0x9B, 0xED, 0x6D, 0xB8, 0xA4, 0x5E, 0x8B, 0x3E,
		0xCF, 0x77, 0xD5, 0xB2, 0xD7, 0xF7, 0xBF, 0xC4,
		0xF9, 0x87, 0xC1, 0xB9, 0xE2, 0xF9, 0x13, 0x60,
		0xB0, 0x3E, 0x90, 0xA3, 0x24, 0x11, 0xC9, 0x13,
		0x35, 0xB6, 0x92, 0xBE, 0xC7, 0x04, 0x5E, 0x5B,
		0x04, 0x91, 0xE1, 0x2C, 0x3E, 0x0E, 0x95, 0x53,
		0xF1, 0x50, 0x39, 0x83, 0xEE, 0xC4, 0xF3, 0x85,
		0x92, 0x2B, 0xC6, 0xFC, 0xAB, 0xF3, 0x1F, 0x0B,
		0x20, 0x24, 0x4D, 0x9B, 0xB8, 0x79, 0x5B, 0x3C,
		0x5A, 0x88, 0x4D, 0x4D, 0x32, 0xC8, 0x9D, 0x95,
		0x52, 0xCC, 0xFC, 0x1F, 0xD3, 0x4E, 0x20, 0xB2,
		0xC0, 0x9E, 0x4D, 0xE5, 0x95, 0xB1, 0xCA, 0xA3,
		0x57, 0x59, 0xDC, 0x49, 0x23, 0x42, 0x25, 0x9B,
		0x0C, 0xF6, 0x95, 0x0A, 0x08, 0x09, 0xC8, 0xD8,
		0xDC, 0xC0, 0x00, 0x71, 0x49, 0x21, 0x5F, 0x9F,
		0x39, 0x80, 0x3A, 0x30, 0x23, 0x85, 0xAA, 0x9D,
		0x44, 0xB2, 0xD4, 0x83, 0x5D, 0x61, 0xA7, 0xA9,
		0xE0, 0x55, 0x2F, 0x8E, 0x30, 0x23, 0x09, 0x55,
		0x9F, 0x33, 0xB9, 0x32, 0xF3, 0x8C, 0x2B, 0xFA,
		0xEF, 0xF3, 0x8B, 0x8A, 0x78, 0x5E, 0x69, 0x47,
		0xE8, 0xEA, 0x0A, 0x73, 0x51, 0x33, 0x12, 0x6D,
		0x80, 0xCB, 0xCE, 0xEF, 0x08, 0xCF, 0xF0, 0xDB,
		0xFF, 0xF2, 0x4B, 0x5B, 0x85, 0x35, 0x71, 0x54,
		0x3F, 0x73, 0x6A, 0x72, 0xC2, 0x85, 0x35, 0x4E,
		0xBE, 0x20, 0x6F, 0xA8, 0xCC, 0x12, 0xFF, 0x3C,
		0x10, 0xCF, 0xDC, 0x3D, 0xC9, 0x4D, 0x16, 0x45,
		0xB3, 0x41, 0xC1, 0x8E, 0x22, 0x0E, 0x52, 0xD8,
		0x68, 0xE7, 0x1C, 0x6F, 0x6E, 0x13, 0xF8, 0x6B,
		0xD4, 0x66, 0xAB, 0x69, 0x7A, 0x53, 0x48, 0x95,
		0x7D, 0x6A, 0x3B, 0x94, 0x14, 0xA0, 0x2D, 0x09,
		0x75, 0x05, 0x5B, 0xF8, 0xDA, 0x94, 0x15, 0x1B,
		0x35, 0xC3, 0xCF, 0x05, 0xD8, 0xCC, 0x31, 0x56,
		0x27, 0xB4, 0xEA, 0x25, 0x98, 0x7C, 0xBE, 0x44,
		0x5D, 0x73, 0x0D, 0x42, 0xBF, 0xF7, 0x4B, 0x35,
		0x37, 0x4D, 0x90, 0xBF, 0x73, 0xC0, 0xDD, 0x79,
		0x8C, 0x77, 0x0D, 0x20, 0x08, 0x95, 0x23, 0xEA,
		0x90, 0x47, 0x3E, 0x06, 0x74, 0x1D, 0x8E, 0x33,
		0x6E, 0x0F, 0xD1, 0xFD, 0xD0, 0x8E, 0x28, 0x55,
		0x0B, 0xC1, 0x2B, 0x56, 0x1D, 0x72, 0x3F, 0xC5,
		0xD1, 0xB3, 0x0D, 0xC7, 0x43, 0x27, 0x40, 0x0D,
		0x2D, 0x6A, 0xF4, 0x08, 0xEF, 0x68, 0xE3, 0x12,
		0x37, 0x44, 0xE9, 0xCA, 0xBB, 0xD0, 0xD7, 0x53,
		0x42, 0x6C, 0xCF, 0xAA, 0xAA, 0x06, 0x51, 0xAB,
		0x26, 0xF4, 0xD6, 0x74, 0xE4, 0x5E, 0x71, 0x3F,
		0xFC, 0x9E, 0x32, 0xEB, 0x93, 0x1B, 0x10, 0x33,
		0xF2, 0x36, 0x93, 0xAE, 0xDC, 0xFC, 0xC5, 0x5E,
		0x19, 0x7B, 0xFE, 0x48, 0xE8, 0x9F, 0x64, 0xB6,
		0xCB, 0xD7, 0xA9, 0xB7, 0xA3, 0x10, 0x1A, 0x5A,
		0x43, 0xD1, 0x91, 0x1E, 0x4C, 0x9B, 0x86, 0xDE,
		0x40, 0x5D, 0xD1, 0x94, 0x1F, 0x70, 0xA2, 0x70,
		0xD4, 0x48, 0x83, 0xB0, 0xC4, 0x83, 0x7A, 0x63,
		0x7E, 0x35, 0x5D, 0x56, 0x12, 0x85, 0x00, 0x9D,
		0x24, 0x22, 0x3C, 0x53, 0x73, 0xFD, 0xD7, 0x5D,
		0x85, 0x30, 0x7C, 0x59, 0x73, 0xDA, 0x5A, 0xDB,
		0x55, 0xD2, 0x35, 0x27, 0xFB, 0x07, 0x9A, 0x3F,
		0x3A, 0xBF, 0x43, 0x27, 0x26, 0x09, 0x22, 0xF1,
		0x20, 0xC2, 0xDB, 0x82, 0xAA, 0xB6, 0xDD, 0x42,
		0x26, 0x1F, 0xB0, 0x9D, 0x28, 0xE5, 0x74, 0xF0,
		0x52, 0xE3, 0xBA, 0x5F, 0x87, 0x4A, 0xAE, 0xAA,
		0xB0, 0xCA, 0xC1, 0x05, 0x14, 0x98, 0xA1, 0x78,
		0x52, 0x83, 0x4F, 0xCC, 0xCB, 0x6C, 0xF2, 0xCE,
		0x17, 0xE3, 0x71, 0x30, 0x63, 0x2C, 0xAE, 0xDE,
		0x61, 0xBC, 0xA8, 0x9A, 0xFA, 0xFD, 0xF2, 0x0C
};

static const struct test_crypto_vector
aes192ctr_test_vector = {
	.crypto_algo = RTE_CRYPTO_CIPHER_AES_CTR,
	.cipher_key = {
		.data = {
			0xE4, 0x23, 0x33, 0x8A, 0x35, 0x64, 0x61, 0xE2,
			0x49, 0x03, 0xDD, 0xC6, 0xB8, 0xCA, 0x55, 0x7A,
			0xD4, 0xC3, 0xA3, 0xAA, 0x33, 0x62, 0x61, 0xE0
		},
		.len = 24
	},
	.iv = {
		.data = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
		},
		.len = 16
	},
	.plaintext = {
		.data = plaintext_aes,
		.len = 512
	},
	.ciphertext = {
		.data = ciphertext_aes192ctr,
		.len = 512
	}
};

static const uint8_t ciphertext_aes256ctr[] = {
		0xD6, 0xCA, 0xD5, 0xA9, 0x99, 0x8A, 0x90, 0xE2,
		0x08, 0x9A, 0x19, 0x6D, 0x8C, 0xF5, 0x8C, 0x31,
		0xDA, 0x78, 0xF7, 0xAE, 0x99, 0x1A, 0x72, 0x36,
		0xBC, 0x44, 0x77, 0x76, 0x23, 0x54, 0x6E, 0x4B,
		0xD8, 0x29, 0x40, 0x07, 0x7F, 0x03, 0x39, 0x52,
		0xC0, 0xA0, 0xA3, 0xF0, 0xB6, 0x1A, 0xED, 0xCB,
		0x19, 0x1C, 0x9A, 0x6A, 0x80, 0xE0, 0x61, 0x93,
		0xA9, 0xFC, 0x76, 0x28, 0x82, 0x99, 0xAC, 0x67,
		0x55, 0x2C, 0x8F, 0x53, 0x41, 0xAA, 0x19, 0x5D,
		0xDA, 0xFB, 0x8B, 0x45, 0x81, 0x73, 0xEC, 0x22,
		0x01, 0xED, 0xED, 0x57, 0xF3, 0x2E, 0x9D, 0xCF,
		0x07, 0x72, 0xCC, 0x3E, 0x32, 0x22, 0x1C, 0xDF,
		0x3A, 0xC3, 0x5F, 0xE5, 0x65, 0xFB, 0x8F, 0x5D,
		0xC7, 0xBE, 0xEC, 0x9C, 0xC0, 0x8F, 0x8A, 0x28,
		0xE7, 0x9E, 0x95, 0xCC, 0xE6, 0xAD, 0x60, 0x3B,
		0xF6, 0x9C, 0x30, 0x69, 0xEE, 0xA8, 0xF3, 0x7D,
		0x39, 0x95, 0x81, 0x1D, 0x24, 0xE3, 0x53, 0xD3,
		0x46, 0x2C, 0x20, 0x79, 0xFE, 0x51, 0x58, 0x59,
		0x46, 0xAF, 0xE8, 0xB7, 0x08, 0x73, 0xFF, 0xE6,
		0x59, 0x9B, 0x3C, 0xF7, 0x5B, 0xD0, 0xDF, 0x81,
		0x16, 0xD6, 0x97, 0xD4, 0xA8, 0x05, 0x1D, 0x0E,
		0x75, 0xE6, 0xE6, 0xA2, 0xA1, 0x47, 0x16, 0x8D,
		0x12, 0x6D, 0xFD, 0xAB, 0x8F, 0xAE, 0x0A, 0xD9,
		0x59, 0x29, 0x69, 0x6D, 0x33, 0xC9, 0xEA, 0x28,
		0x4C, 0x7D, 0xEF, 0x7E, 0x44, 0x1A, 0x76, 0xF1,
		0xC1, 0xDB, 0xE3, 0x0F, 0x4F, 0xD7, 0xAE, 0x3A,
		0x28, 0x7B, 0x9C, 0xA6, 0x8C, 0xD8, 0x19, 0x86,
		0x81, 0x8B, 0xC6, 0x38, 0xCB, 0x17, 0x46, 0x2B,
		0x22, 0x8E, 0x7A, 0xB2, 0xC0, 0xF9, 0x9A, 0x5F,
		0xA2, 0x2F, 0x75, 0x1B, 0x9F, 0x86, 0x7A, 0x9C,
		0x69, 0x0F, 0xA1, 0x71, 0xCB, 0x71, 0x18, 0x1B,
		0x5C, 0xF7, 0xD4, 0x64, 0x09, 0x58, 0x90, 0xDC,
		0x82, 0xA8, 0x31, 0xBB, 0x4D, 0x38, 0xE3, 0x97,
		0x32, 0x4C, 0xD7, 0x26, 0x29, 0x61, 0x9D, 0x8C,
		0x26, 0x42, 0x82, 0x0C, 0x7A, 0xE4, 0xEB, 0x7F,
		0x26, 0xE1, 0xD1, 0x35, 0x88, 0x4F, 0xBE, 0xDC,
		0xA6, 0x0C, 0xCE, 0xB4, 0xFF, 0x85, 0x31, 0x07,
		0x93, 0xFD, 0xA3, 0x98, 0xFA, 0x44, 0x3C, 0x91,
		0xED, 0x15, 0x3E, 0x76, 0x06, 0xDE, 0xC9, 0x43,
		0xA5, 0x95, 0x5B, 0xB4, 0xF5, 0xD9, 0x16, 0x8E,
		0x18, 0x76, 0xAD, 0x62, 0x93, 0xFB, 0xF6, 0x3D,
		0xB1, 0x3F, 0xAE, 0xE0, 0x98, 0xD4, 0xA4, 0xF0,
		0x6D, 0x1B, 0x39, 0x36, 0x91, 0x49, 0x5E, 0x42,
		0x7D, 0xAB, 0x84, 0xA6, 0x3C, 0xD4, 0x6B, 0xF9,
		0xAA, 0x1F, 0x2E, 0x07, 0xC1, 0xA9, 0x5F, 0xC9,
		0x00, 0xCC, 0x0F, 0x19, 0xD9, 0xB5, 0x49, 0x06,
		0x81, 0x05, 0x78, 0xE8, 0x49, 0x02, 0xCC, 0x31,
		0x52, 0x01, 0x17, 0x76, 0xFB, 0xEF, 0x0E, 0x99,
		0xA2, 0x71, 0x22, 0xEB, 0x78, 0x48, 0xBB, 0xF5,
		0x6B, 0x50, 0x2A, 0x39, 0xA0, 0x66, 0xC1, 0x72,
		0xBD, 0x40, 0x99, 0x86, 0xFE, 0x80, 0xE4, 0x69,
		0x30, 0x05, 0x7A, 0xD7, 0xFD, 0x6E, 0x1A, 0x73,
		0xA4, 0x54, 0x5F, 0x61, 0xF2, 0x4B, 0x6B, 0x6C,
		0x90, 0x9C, 0x50, 0x7F, 0xDA, 0xA1, 0x5C, 0x8D,
		0x06, 0x29, 0x37, 0x55, 0x88, 0xAD, 0xAB, 0x3F,
		0x03, 0x62, 0x7C, 0x35, 0xB5, 0x30, 0xAA, 0x04,
		0xC5, 0xBD, 0x87, 0x20, 0x29, 0xA3, 0xAD, 0x65,
		0x00, 0x5D, 0x04, 0xA3, 0x6F, 0x2C, 0x23, 0x23,
		0xBA, 0x89, 0x40, 0x0B, 0x2B, 0x7E, 0x68, 0x96,
		0x18, 0xEC, 0x53, 0x0F, 0x9C, 0x05, 0x4B, 0xA1,
		0xE7, 0x10, 0x52, 0x7B, 0xEA, 0xD1, 0x17, 0x05,
		0xD0, 0x5E, 0x35, 0xC6, 0x4C, 0x8A, 0xE3, 0xBF,
		0x73, 0x5B, 0x5A, 0x4E, 0xB1, 0x78, 0xE0, 0x13,
		0xF0, 0x3F, 0x06, 0xDC, 0x28, 0x2A, 0xBD, 0x45
};

static const struct test_crypto_vector
aes256ctr_test_vector = {
	.crypto_algo = RTE_CRYPTO_CIPHER_AES_CTR,
	.cipher_key = {
		.data = {
			0xE4, 0x23, 0x33, 0x8A, 0x35, 0x64, 0x61, 0xE2,
			0x49, 0x03, 0xDD, 0xC6, 0xB8, 0xCA, 0x55, 0x7A,
			0xD4, 0xC3, 0xA3, 0xAA, 0x33, 0x62, 0x61, 0xE0,
			0x37, 0x07, 0xB8, 0x23, 0xA2, 0xA3, 0xB5, 0x8D
		},
		.len = 32
	},
	.iv = {
		.data = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
		},
		.len = 16
	},
	.plaintext = {
		.data = plaintext_aes,
		.len = 512
	},
	.ciphertext = {
		.data = ciphertext_aes256ctr,
		.len = 512
	}
};

static const uint8_t ciphertext_aes128cbc[] = {
		0x8B, 0x4D, 0xDA, 0x1B, 0xCF, 0x04, 0xA0, 0x31,
		0xB4, 0xBF, 0xBD, 0x68, 0x43, 0x20, 0x7E, 0x76,
		0xB1, 0x96, 0x8B, 0xA2, 0x7C, 0xA2, 0x83, 0x9E,
		0x39, 0x5A, 0x2F, 0x7E, 0x92, 0xB4, 0x48, 0x1A,
		0x3F, 0x6B, 0x5D, 0xDF, 0x52, 0x85, 0x5F, 0x8E,
		0x42, 0x3C, 0xFB, 0xE9, 0x1A, 0x24, 0xD6, 0x08,
		0xDD, 0xFD, 0x16, 0xFB, 0xE9, 0x55, 0xEF, 0xF0,
		0xA0, 0x8D, 0x13, 0xAB, 0x81, 0xC6, 0x90, 0x01,
		0xB5, 0x18, 0x84, 0xB3, 0xF6, 0xE6, 0x11, 0x57,
		0xD6, 0x71, 0xC6, 0x3C, 0x3F, 0x2F, 0x33, 0xEE,
		0x24, 0x42, 0x6E, 0xAC, 0x0B, 0xCA, 0xEC, 0xF9,
		0x84, 0xF8, 0x22, 0xAA, 0x60, 0xF0, 0x32, 0xA9,
		0x75, 0x75, 0x3B, 0xCB, 0x70, 0x21, 0x0A, 0x8D,
		0x0F, 0xE0, 0xC4, 0x78, 0x2B, 0xF8, 0x97, 0xE3,
		0xE4, 0x26, 0x4B, 0x29, 0xDA, 0x88, 0xCD, 0x46,
		0xEC, 0xAA, 0xF9, 0x7F, 0xF1, 0x15, 0xEA, 0xC3,
		0x87, 0xE6, 0x31, 0xF2, 0xCF, 0xDE, 0x4D, 0x80,
		0x70, 0x91, 0x7E, 0x0C, 0xF7, 0x26, 0x3A, 0x92,
		0x4F, 0x18, 0x83, 0xC0, 0x8F, 0x59, 0x01, 0xA5,
		0x88, 0xD1, 0xDB, 0x26, 0x71, 0x27, 0x16, 0xF5,
		0xEE, 0x10, 0x82, 0xAC, 0x68, 0x26, 0x9B, 0xE2,
		0x6D, 0xD8, 0x9A, 0x80, 0xDF, 0x04, 0x31, 0xD5,
		0xF1, 0x35, 0x5C, 0x3B, 0xDD, 0x9A, 0x65, 0xBA,
		0x58, 0x34, 0x85, 0x61, 0x1C, 0x42, 0x10, 0x76,
		0x73, 0x02, 0x42, 0xC9, 0x23, 0x18, 0x8E, 0xB4,
		0x6F, 0xB4, 0xA3, 0x54, 0x6E, 0x88, 0x3B, 0x62,
		0x7C, 0x02, 0x8D, 0x4C, 0x9F, 0xC8, 0x45, 0xF4,
		0xC9, 0xDE, 0x4F, 0xEB, 0x22, 0x83, 0x1B, 0xE4,
		0x49, 0x37, 0xE4, 0xAD, 0xE7, 0xCD, 0x21, 0x54,
		0xBC, 0x1C, 0xC2, 0x04, 0x97, 0xB4, 0x10, 0x61,
		0xF0, 0xE4, 0xEF, 0x27, 0x63, 0x3A, 0xDA, 0x91,
		0x41, 0x25, 0x62, 0x1C, 0x5C, 0xB6, 0x38, 0x4A,
		0x88, 0x71, 0x59, 0x5A, 0x8D, 0xA0, 0x09, 0xAF,
		0x72, 0x94, 0xD7, 0x79, 0x5C, 0x60, 0x7C, 0x8F,
		0x4C, 0xF5, 0xD9, 0xA1, 0x39, 0x6D, 0x81, 0x28,
		0xEF, 0x13, 0x28, 0xDF, 0xF5, 0x3E, 0xF7, 0x8E,
		0x09, 0x9C, 0x78, 0x18, 0x79, 0xB8, 0x68, 0xD7,
		0xA8, 0x29, 0x62, 0xAD, 0xDE, 0xE1, 0x61, 0x76,
		0x1B, 0x05, 0x16, 0xCD, 0xBF, 0x02, 0x8E, 0xA6,
		0x43, 0x6E, 0x92, 0x55, 0x4F, 0x60, 0x9C, 0x03,
		0xB8, 0x4F, 0xA3, 0x02, 0xAC, 0xA8, 0xA7, 0x0C,
		0x1E, 0xB5, 0x6B, 0xF8, 0xC8, 0x4D, 0xDE, 0xD2,
		0xB0, 0x29, 0x6E, 0x40, 0xE6, 0xD6, 0xC9, 0xE6,
		0xB9, 0x0F, 0xB6, 0x63, 0xF5, 0xAA, 0x2B, 0x96,
		0xA7, 0x16, 0xAC, 0x4E, 0x0A, 0x33, 0x1C, 0xA6,
		0xE6, 0xBD, 0x8A, 0xCF, 0x40, 0xA9, 0xB2, 0xFA,
		0x63, 0x27, 0xFD, 0x9B, 0xD9, 0xFC, 0xD5, 0x87,
		0x8D, 0x4C, 0xB6, 0xA4, 0xCB, 0xE7, 0x74, 0x55,
		0xF4, 0xFB, 0x41, 0x25, 0xB5, 0x4B, 0x0A, 0x1B,
		0xB1, 0xD6, 0xB7, 0xD9, 0x47, 0x2A, 0xC3, 0x98,
		0x6A, 0xC4, 0x03, 0x73, 0x1F, 0x93, 0x6E, 0x53,
		0x19, 0x25, 0x64, 0x15, 0x83, 0xF9, 0x73, 0x2A,
		0x74, 0xB4, 0x93, 0x69, 0xC4, 0x72, 0xFC, 0x26,
		0xA2, 0x9F, 0x43, 0x45, 0xDD, 0xB9, 0xEF, 0x36,
		0xC8, 0x3A, 0xCD, 0x99, 0x9B, 0x54, 0x1A, 0x36,
		0xC1, 0x59, 0xF8, 0x98, 0xA8, 0xCC, 0x28, 0x0D,
		0x73, 0x4C, 0xEE, 0x98, 0xCB, 0x7C, 0x58, 0x7E,
		0x20, 0x75, 0x1E, 0xB7, 0xC9, 0xF8, 0xF2, 0x0E,
		0x63, 0x9E, 0x05, 0x78, 0x1A, 0xB6, 0xA8, 0x7A,
		0xF9, 0x98, 0x6A, 0xA6, 0x46, 0x84, 0x2E, 0xF6,
		0x4B, 0xDC, 0x9B, 0x8F, 0x9B, 0x8F, 0xEE, 0xB4,
		0xAA, 0x3F, 0xEE, 0xC0, 0x37, 0x27, 0x76, 0xC7,
		0x95, 0xBB, 0x26, 0x74, 0x69, 0x12, 0x7F, 0xF1,
		0xBB, 0xFF, 0xAE, 0xB5, 0x99, 0x6E, 0xCB, 0x0C
};

static const struct test_crypto_vector
aes128cbc_test_vector = {
	.crypto_algo = RTE_CRYPTO_CIPHER_AES_CBC,
	.cipher_key = {
		.data = {
			0xE4, 0x23, 0x33, 0x8A, 0x35, 0x64, 0x61, 0xE2,
			0x49, 0x03, 0xDD, 0xC6, 0xB8, 0xCA, 0x55, 0x7A
		},
		.len = 16
	},
	.iv = {
		.data = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
		},
		.len = 16
	},
	.plaintext = {
		.data = plaintext_aes,
		.len = 512
	},
	.ciphertext = {
		.data = ciphertext_aes128cbc,
		.len = 512
	},
};

static const struct test_crypto_vector
aes128cbc_sha1_test_vector = {
	.crypto_algo = RTE_CRYPTO_CIPHER_AES_CBC,
	.cipher_key = {
		.data = {
			0xE4, 0x23, 0x33, 0x8A, 0x35, 0x64, 0x61, 0xE2,
			0x49, 0x03, 0xDD, 0xC6, 0xB8, 0xCA, 0x55, 0x7A
		},
		.len = 16
	},
	.iv = {
		.data = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
		},
		.len = 16
	},
	.plaintext = {
		.data = plaintext_aes,
		.len = 512
	},
	.ciphertext = {
		.data = ciphertext_aes128cbc,
		.len = 512
	},
	.auth_algo = RTE_CRYPTO_AUTH_SHA1,
	.digest = {
		.data = {
			0x61, 0xe6, 0x29, 0x3c, 0x1a, 0x93, 0x73, 0x26,
			0xb3, 0x35, 0xdd, 0x4b, 0x23, 0xef, 0x19, 0x6f,
			0x6e, 0x4f, 0x0e, 0xfd
		},
		.len = 20
	}
};

static const struct test_crypto_vector
aes128cbc_hmac_sha1_test_vector = {
	.crypto_algo = RTE_CRYPTO_CIPHER_AES_CBC,
	.cipher_key = {
		.data = {
			0xE4, 0x23, 0x33, 0x8A, 0x35, 0x64, 0x61, 0xE2,
			0x49, 0x03, 0xDD, 0xC6, 0xB8, 0xCA, 0x55, 0x7A
		},
		.len = 16
	},
	.iv = {
		.data = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
		},
		.len = 16
	},
	.plaintext = {
		.data = plaintext_aes,
		.len = 512
	},
	.ciphertext = {
		.data = ciphertext_aes128cbc,
		.len = 512
	},
	.auth_algo = RTE_CRYPTO_AUTH_SHA1_HMAC,
	.auth_key = {
		.data = {
			0xF8, 0x2A, 0xC7, 0x54, 0xDB, 0x96, 0x18, 0xAA,
			0xC3, 0xA1, 0x53, 0xF6, 0x1F, 0x17, 0x60, 0xBD,
			0xDE, 0xF4, 0xDE, 0xAD
		},
		.len = 20
	},
	.digest = {
		.data = {
			0x9A, 0x4F, 0x88, 0x1B, 0xB6, 0x8F, 0xD8, 0x60,
			0x42, 0x1A, 0x7D, 0x3D, 0xF5, 0x82, 0x80, 0xF1,
			0x18, 0x8C, 0x1D, 0x32
		},
		.len = 20
	}
};

static const struct test_crypto_vector
aes128cbc_aes128_gmac_test_vector = {
	.crypto_algo = RTE_CRYPTO_CIPHER_AES_CBC,
	.cipher_key = {
		.data = {
			0xE4, 0x23, 0x33, 0x8A, 0x35, 0x64, 0x61, 0xE2,
			0x49, 0x03, 0xDD, 0xC6, 0xB8, 0xCA, 0x55, 0x7A
		},
		.len = 16
	},
	.iv = {
		.data = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
		},
		.len = 16
	},
	.plaintext = {
		.data = plaintext_aes,
		.len = 512
	},
	.ciphertext = {
		.data = ciphertext_aes128cbc,
		.len = 512
	},
	.auth_algo = RTE_CRYPTO_AUTH_AES_GMAC,
	.auth_key = {
		.data = {
			0x42, 0x1A, 0x7D, 0x3D, 0xF5, 0x82, 0x80, 0xF1,
			0xF1, 0x35, 0x5C, 0x3B, 0xDD, 0x9A, 0x65, 0xBA
		},
		.len = 16
	},
	.digest = {
		.data = {
			0x6B, 0x5B, 0xDF, 0xDA, 0x75, 0x18, 0x72, 0xD5,
			0x67, 0x59, 0xA6, 0xCC, 0x3E, 0x74, 0x62, 0xFF
		},
		.len = 16
	}
};

static const struct test_crypto_vector
aes128cbc_aes192_gmac_test_vector = {
	.crypto_algo = RTE_CRYPTO_CIPHER_AES_CBC,
	.cipher_key = {
		.data = {
			0xE4, 0x23, 0x33, 0x8A, 0x35, 0x64, 0x61, 0xE2,
			0x49, 0x03, 0xDD, 0xC6, 0xB8, 0xCA, 0x55, 0x7A
		},
		.len = 16
	},
	.iv = {
		.data = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
		},
		.len = 16
	},
	.plaintext = {
		.data = plaintext_aes,
		.len = 512
	},
	.ciphertext = {
		.data = ciphertext_aes128cbc,
		.len = 512
	},
	.auth_algo = RTE_CRYPTO_AUTH_AES_GMAC,
	.auth_key = {
		.data = {
			0x42, 0x1A, 0x7D, 0x3D, 0xF5, 0x82, 0x80, 0xF1,
			0xF1, 0x35, 0x5C, 0x3B, 0xDD, 0x9A, 0x65, 0xBA,
			0x58, 0x34, 0x85, 0x61, 0x1C, 0x42, 0x10, 0x76
		},
		.len = 24
	},
	.digest = {
		.data = {
			0xE8, 0x56, 0xFE, 0x75, 0x94, 0x64, 0xC9, 0x51,
			0xDD, 0x97, 0x74, 0xEE, 0xB6, 0x2D, 0x3F, 0x12
		},
		.len = 16
	}
};

static const struct test_crypto_vector
aes128cbc_aes256_gmac_test_vector = {
	.crypto_algo = RTE_CRYPTO_CIPHER_AES_CBC,
	.cipher_key = {
		.data = {
			0xE4, 0x23, 0x33, 0x8A, 0x35, 0x64, 0x61, 0xE2,
			0x49, 0x03, 0xDD, 0xC6, 0xB8, 0xCA, 0x55, 0x7A
		},
		.len = 16
	},
	.iv = {
		.data = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
		},
		.len = 16
	},
	.plaintext = {
		.data = plaintext_aes,
		.len = 512
	},
	.ciphertext = {
		.data = ciphertext_aes128cbc,
		.len = 512
	},
	.auth_algo = RTE_CRYPTO_AUTH_AES_GMAC,
	.auth_key = {
		.data = {
			0x42, 0x1A, 0x7D, 0x3D, 0xF5, 0x82, 0x80, 0xF1,
			0xF1, 0x35, 0x5C, 0x3B, 0xDD, 0x9A, 0x65, 0xBA,
			0x58, 0x34, 0x85, 0x61, 0x1C, 0x42, 0x10, 0x76,
			0x9A, 0x4F, 0x88, 0x1B, 0xB6, 0x8F, 0xD8, 0x60
		},
		.len = 32
	},
	.digest = {
		.data = {
			0x9A, 0x98, 0x04, 0x7E, 0x30, 0xF7, 0x03, 0x79,
			0x54, 0xAF, 0x2D, 0x7B, 0x35, 0xBA, 0x65, 0xE9
		},
		.len = 16
	}
};

static const uint8_t ciphertext_aes192cbc[] = {
		0x45, 0xEE, 0x9A, 0xEA, 0x3C, 0x03, 0xFC, 0x4C,
		0x84, 0x36, 0xB0, 0xDA, 0xB0, 0xDC, 0xF3, 0x5B,
		0x75, 0xA7, 0xBE, 0x0E, 0xC0, 0x8D, 0x6C, 0xF8,
		0xC1, 0x0F, 0xD0, 0x35, 0x1D, 0x82, 0xAE, 0x7C,
		0x57, 0xC5, 0x7A, 0x55, 0x87, 0x1B, 0xD4, 0x03,
		0x0A, 0x64, 0xC9, 0xE0, 0xF4, 0xC7, 0x6F, 0x57,
		0x52, 0xC6, 0x73, 0xBA, 0x84, 0x0B, 0x5B, 0x89,
		0x21, 0xD2, 0x9B, 0x88, 0x68, 0xF5, 0xA9, 0x7F,
		0x3F, 0x49, 0xEB, 0xF4, 0xD4, 0x52, 0xD2, 0x64,
		0x80, 0xB2, 0x53, 0xDA, 0x19, 0xF6, 0x10, 0x24,
		0x23, 0x26, 0x7A, 0x7C, 0x07, 0x57, 0x4B, 0x0E,
		0x58, 0x49, 0x61, 0xD1, 0xDC, 0x9A, 0x32, 0x6B,
		0x0F, 0x43, 0x9E, 0x4D, 0xB4, 0x07, 0x4E, 0xB3,
		0x51, 0x74, 0xDE, 0x29, 0xBC, 0x98, 0xF9, 0xDF,
		0x78, 0x9A, 0x18, 0x9C, 0xD6, 0x7A, 0x55, 0x7C,
		0xE6, 0x1D, 0x5C, 0x1A, 0x99, 0xD2, 0xC3, 0x7B,
		0x9F, 0x96, 0x74, 0x2D, 0xE0, 0xEF, 0xD1, 0xE3,
		0x08, 0x9F, 0xAF, 0xE6, 0xED, 0xCA, 0xE1, 0xEA,
		0x23, 0x6F, 0x7C, 0x81, 0xA8, 0xC0, 0x5B, 0x8B,
		0x53, 0x90, 0x51, 0x2D, 0x0F, 0xF6, 0x7D, 0xA7,
		0x1C, 0xBD, 0x83, 0x84, 0x54, 0xA4, 0x15, 0xFB,
		0x3E, 0x25, 0xA7, 0x3A, 0x0A, 0x73, 0xD9, 0x88,
		0x6F, 0x80, 0x78, 0x95, 0x7F, 0x60, 0xAA, 0x86,
		0x8A, 0xFC, 0xDF, 0xC1, 0xCB, 0xDE, 0xBB, 0x25,
		0x52, 0x20, 0xC6, 0x79, 0xD4, 0x0F, 0x25, 0xE7,
		0xDB, 0xB2, 0x17, 0xA4, 0x6F, 0x3C, 0x6F, 0x91,
		0xF6, 0x44, 0x1E, 0xB6, 0x85, 0xBC, 0x7A, 0x14,
		0x10, 0x72, 0xBD, 0x16, 0x63, 0x39, 0x9E, 0x7B,
		0x84, 0x5B, 0x17, 0x61, 0xB1, 0x5D, 0x82, 0x0B,
		0x6D, 0x37, 0xD7, 0x79, 0xB8, 0x24, 0x91, 0x30,
		0x82, 0x91, 0x02, 0xB1, 0x18, 0x4B, 0xE0, 0xF4,
		0x13, 0x1B, 0xB2, 0x4C, 0xDA, 0xB8, 0x99, 0x96,
		0x83, 0x2F, 0xBE, 0x53, 0x8D, 0xDE, 0xFA, 0xAD,
		0xF6, 0x5C, 0xDB, 0xE5, 0x66, 0x26, 0x8F, 0x13,
		0x2B, 0x76, 0x47, 0x73, 0xDE, 0x1A, 0x74, 0xA6,
		0x30, 0xAF, 0x42, 0xA0, 0xE5, 0xD2, 0x8F, 0xC2,
		0xED, 0x3E, 0x9E, 0x29, 0x54, 0x3C, 0xDE, 0x9F,
		0x5D, 0x30, 0x2B, 0x63, 0xFB, 0xE3, 0xB1, 0x07,
		0xEE, 0x74, 0x4A, 0xAF, 0xB1, 0x20, 0x8D, 0xEC,
		0xE6, 0x78, 0x16, 0x8D, 0xA4, 0x6E, 0x34, 0x7D,
		0x47, 0xFB, 0x0B, 0xC1, 0x32, 0xD7, 0x0D, 0x6C,
		0x6F, 0x93, 0x9C, 0x5E, 0xEF, 0x1F, 0x9C, 0x45,
		0x80, 0x6B, 0x74, 0xA6, 0x81, 0xF2, 0xF6, 0xFA,
		0xAA, 0x9D, 0x4F, 0xCA, 0xB5, 0x90, 0x59, 0xB0,
		0x3B, 0xF2, 0xF0, 0x75, 0xFD, 0x8A, 0xD8, 0x97,
		0x65, 0x88, 0x56, 0x4C, 0x44, 0xDF, 0x73, 0xF7,
		0x56, 0x9C, 0x48, 0x7E, 0xB0, 0x1F, 0x1D, 0x7D,
		0x6A, 0x11, 0xF5, 0xC2, 0xF4, 0x17, 0xEF, 0x58,
		0xD8, 0x2A, 0xAF, 0x56, 0x2F, 0xCF, 0xEC, 0xA4,
		0x58, 0x8B, 0x60, 0xCE, 0xD4, 0x0F, 0x9C, 0x21,
		0xEC, 0x3E, 0x74, 0x7B, 0x81, 0x3D, 0x69, 0xC6,
		0x5E, 0x12, 0x83, 0xE9, 0xEF, 0x81, 0x58, 0x36,
		0x6A, 0x60, 0x0F, 0x54, 0x28, 0x11, 0xF9, 0x64,
		0x36, 0xAD, 0x79, 0xF5, 0x1C, 0x74, 0xD0, 0xC3,
		0x7B, 0x61, 0xE1, 0x92, 0xB0, 0x13, 0x91, 0x87,
		0x32, 0x1F, 0xF2, 0x5A, 0xDA, 0x25, 0x69, 0xEB,
		0xD7, 0x32, 0x7F, 0xF5, 0x23, 0x21, 0x54, 0x47,
		0x7B, 0x1B, 0x33, 0xB0, 0x3D, 0xF6, 0xE2, 0x7E,
		0x3E, 0xA2, 0x9E, 0xCA, 0x48, 0x0B, 0x4A, 0x29,
		0x81, 0xD4, 0x4E, 0xD5, 0x69, 0xFB, 0xCD, 0x37,
		0x8A, 0xC1, 0x5B, 0x50, 0xFF, 0xB5, 0x7D, 0x43,
		0x0F, 0xAE, 0xA6, 0xC2, 0xE5, 0x8F, 0x45, 0xB2,
		0x85, 0x99, 0x02, 0xA2, 0x9B, 0xBE, 0x90, 0x43,
		0x4F, 0x2F, 0x50, 0xE2, 0x77, 0x62, 0xD9, 0xCC
};

static const struct test_crypto_vector
aes192cbc_test_vector = {
	.crypto_algo = RTE_CRYPTO_CIPHER_AES_CBC,
	.cipher_key = {
		.data = {
			0xE4, 0x23, 0x33, 0x8A, 0x35, 0x64, 0x61, 0xE2,
			0x49, 0x03, 0xDD, 0xC6, 0xB8, 0xCA, 0x55, 0x7A,
			0xD4, 0xC3, 0xA3, 0xAA, 0x33, 0x62, 0x61, 0xE0
		},
		.len = 24
	},
	.iv = {
		.data = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
		},
		.len = 16
	},
	.plaintext = {
		.data = plaintext_aes,
		.len = 512
	},
	.ciphertext = {
		.data = ciphertext_aes192cbc,
		.len = 512
	}
};

static const uint8_t ciphertext_aes256cbc[] = {
		0xF3, 0xDD, 0xF0, 0x0B, 0xFF, 0xA2, 0x6A, 0x04,
		0xBE, 0xDA, 0x52, 0xA6, 0xFE, 0x6B, 0xA6, 0xA7,
		0x48, 0x1D, 0x7D, 0x98, 0x65, 0xDB, 0xEF, 0x06,
		0x26, 0xB5, 0x8E, 0xEB, 0x05, 0x0E, 0x77, 0x98,
		0x17, 0x8E, 0xD0, 0xD4, 0x7B, 0x92, 0x8F, 0x5C,
		0xD0, 0x74, 0x5C, 0xA8, 0x4B, 0x54, 0xB6, 0x2F,
		0x83, 0x72, 0x2C, 0xFF, 0x72, 0xE9, 0xE4, 0x15,
		0x4C, 0x32, 0xAF, 0xC8, 0xC9, 0x89, 0x3C, 0x6E,
		0x31, 0xD5, 0xC0, 0x16, 0xC0, 0x31, 0x7D, 0x11,
		0xAB, 0xCB, 0xDE, 0xD2, 0xD6, 0xAA, 0x76, 0x5E,
		0xBA, 0xF6, 0xE2, 0x92, 0xCB, 0x86, 0x07, 0xFA,
		0xD4, 0x9E, 0x83, 0xED, 0xFD, 0xB8, 0x70, 0x54,
		0x6B, 0xBE, 0xEC, 0x72, 0xDD, 0x28, 0x5E, 0x95,
		0x78, 0xA5, 0x28, 0x43, 0x3D, 0x6D, 0xB1, 0xD9,
		0x69, 0x1F, 0xC9, 0x66, 0x0E, 0x32, 0x44, 0x08,
		0xD2, 0xAE, 0x2C, 0x43, 0xF2, 0xD0, 0x7D, 0x26,
		0x70, 0xE5, 0xA1, 0xCA, 0x37, 0xE9, 0x7D, 0xC7,
		0xA3, 0xFA, 0x81, 0x91, 0x64, 0xAA, 0x64, 0x91,
		0x9A, 0x95, 0x2D, 0xC9, 0xF9, 0xCE, 0xFE, 0x9F,
		0xC4, 0xD8, 0x81, 0xBE, 0x57, 0x84, 0xC5, 0x02,
		0xDB, 0x30, 0xC1, 0xD9, 0x0E, 0xA0, 0xA6, 0x00,
		0xD6, 0xF3, 0x52, 0x7E, 0x0D, 0x23, 0x6B, 0x2B,
		0x34, 0x99, 0x1F, 0x70, 0x27, 0x6D, 0x58, 0x84,
		0x93, 0x77, 0xB8, 0x3E, 0xF1, 0x71, 0x58, 0x42,
		0x8B, 0x2B, 0xC8, 0x6D, 0x05, 0x84, 0xFF, 0x4E,
		0x85, 0xEF, 0x4A, 0x9D, 0x91, 0x6A, 0xD5, 0xE1,
		0xAF, 0x01, 0xEB, 0x83, 0x8F, 0x23, 0x7C, 0x7F,
		0x12, 0x91, 0x05, 0xF0, 0x4E, 0xD9, 0x17, 0x62,
		0x75, 0xBB, 0xAC, 0x97, 0xEE, 0x3B, 0x4E, 0xC7,
		0xE5, 0x92, 0xF8, 0x9D, 0x4C, 0xF9, 0xEE, 0x55,
		0x18, 0xBB, 0xCC, 0xB4, 0xF2, 0x59, 0xB9, 0xFC,
		0x7A, 0x0F, 0x98, 0xD4, 0x8B, 0xFE, 0xF7, 0x83,
		0x46, 0xE2, 0x83, 0x33, 0x3E, 0x95, 0x8D, 0x17,
		0x1E, 0x85, 0xF8, 0x8C, 0x51, 0xB0, 0x6C, 0xB5,
		0x5E, 0x95, 0xBA, 0x4B, 0x69, 0x1B, 0x48, 0x69,
		0x0B, 0x8F, 0xA5, 0x18, 0x13, 0xB9, 0x77, 0xD1,
		0x80, 0x32, 0x32, 0x6D, 0x53, 0xA1, 0x95, 0x40,
		0x96, 0x8A, 0xCC, 0xA3, 0x69, 0xF8, 0x9F, 0xB5,
		0x8E, 0xD2, 0x68, 0x07, 0x4F, 0xA7, 0xEC, 0xF8,
		0x20, 0x21, 0x58, 0xF8, 0xD8, 0x9E, 0x5F, 0x40,
		0xBA, 0xB9, 0x76, 0x57, 0x3B, 0x17, 0xAD, 0xEE,
		0xCB, 0xDF, 0x07, 0xC1, 0xDF, 0x66, 0xA8, 0x0D,
		0xC2, 0xCE, 0x8F, 0x79, 0xC3, 0x32, 0xE0, 0x8C,
		0xFE, 0x5A, 0xF3, 0x55, 0x27, 0x73, 0x6F, 0xA1,
		0x54, 0xC6, 0xFC, 0x28, 0x9D, 0xBE, 0x97, 0xB9,
		0x54, 0x97, 0x72, 0x3A, 0x61, 0xAF, 0x6F, 0xDE,
		0xF8, 0x0E, 0xBB, 0x6B, 0x96, 0x84, 0xDD, 0x9B,
		0x62, 0xBA, 0x47, 0xB5, 0xC9, 0x3B, 0x4E, 0x8C,
		0x78, 0x2A, 0xCC, 0x0A, 0x69, 0x54, 0x25, 0x5E,
		0x8B, 0xAC, 0x56, 0xD9, 0xFE, 0x48, 0xBA, 0xCE,
		0xA9, 0xCE, 0xA6, 0x1D, 0xBF, 0x3E, 0x3C, 0x66,
		0x40, 0x71, 0x79, 0xAD, 0x5B, 0x26, 0xAD, 0xBE,
		0x58, 0x13, 0x64, 0x60, 0x7C, 0x05, 0xFC, 0xE3,
		0x51, 0x7A, 0xF2, 0xCC, 0x54, 0x16, 0x2C, 0xA4,
		0xCE, 0x5F, 0x59, 0x12, 0x77, 0xEB, 0xD9, 0x23,
		0xE3, 0x86, 0xFB, 0xD7, 0x48, 0x76, 0x9D, 0xE3,
		0x89, 0x87, 0x39, 0xFA, 0x7B, 0x21, 0x0B, 0x76,
		0xB2, 0xED, 0x1C, 0x27, 0x4B, 0xD5, 0x27, 0x05,
		0x8C, 0x7D, 0x58, 0x6C, 0xCA, 0xA5, 0x54, 0x9A,
		0x0F, 0xCB, 0xE9, 0x88, 0x31, 0xAD, 0x49, 0xEE,
		0x38, 0xFB, 0xC9, 0xFB, 0xB4, 0x7A, 0x00, 0x58,
		0x20, 0x32, 0xD3, 0x53, 0x5A, 0xDD, 0x74, 0x95,
		0x60, 0x59, 0x09, 0xAE, 0x7E, 0xEC, 0x74, 0xA3,
		0xB7, 0x1C, 0x6D, 0xF2, 0xAE, 0x79, 0xA4, 0x7C
};

static const struct test_crypto_vector
aes256cbc_test_vector = {
	.crypto_algo = RTE_CRYPTO_CIPHER_AES_CBC,
	.cipher_key = {
		.data = {
			0xE4, 0x23, 0x33, 0x8A, 0x35, 0x64, 0x61, 0xE2,
			0x49, 0x03, 0xDD, 0xC6, 0xB8, 0xCA, 0x55, 0x7A,
			0xD4, 0xC3, 0xA3, 0xAA, 0x33, 0x62, 0x61, 0xE0,
			0x37, 0x07, 0xB8, 0x23, 0xA2, 0xA3, 0xB5, 0x8D
		},
		.len = 32
	},
	.iv = {
		.data = {
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
		},
		.len = 16
	},
	.plaintext = {
		.data = plaintext_aes,
		.len = 512
	},
	.ciphertext = {
		.data = ciphertext_aes256cbc,
		.len = 512
	}
};

#endif /* TEST_CRYPTODEV_AES_TEST_VECTORS_H_ */
